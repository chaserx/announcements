{"name":"Announcements","body":"# announcements\r\n\r\nThe Announcements gem provides an easy way to publish short messages in your views, which the user can then hide permanently.\r\nIt was influenced by the gem `paul_revere` by thoughtbot, but unlike `paul_revere`, `announcements` doesn't use partials (instead,\r\nthere is a single helper method which you can customise) and is a bit more flexible (you have an additional 'type' attribute by default).\r\n\r\n## Update\r\n\r\nNow by default `announcements` displays alerts in the `twitter-bootstrap` [style](http://twitter.github.com/bootstrap/components.html#alerts).\r\n\r\nBe sure to use one of the twitter-bootstrap gems.\r\n\r\n## Quick start\r\n\r\n1. Requirements: rails >= 3.1.0 and jquery-rails\r\n2. Add `gem 'announcements'` to your Gemfile and run `bundle`\r\n3. Run `rails g announcements:install`\r\n4. Use `<%= announce Announcement.newest %>` in your views to display the latest announcement\r\n5. Create your first announcement in `rails c` by simply creating a new Announcement record, like `Announcement.create(:body => 'This is my first announcement!')`\r\n6. Next, relax bootstrap's got the rest.\r\n\r\n## Styling\r\n\r\nBy default, the announcement text and hide message text are wrapped in a div classed as \"alert alert-block\" consistent with Twitter Bootstrap. \r\n\r\n```html\r\n<div class=\"alert alert-block\">\r\n\t<a class=\"close\" data-announcementid=\"1\">x</a><h4 class=\"alert-heading\">Warning!</h4>check yo self\r\n</div>\r\n```\r\n\r\n## Customization\r\n\r\nThe default HTML output of the `announce` helper is\r\n\r\n```html\r\n<div class=\"alert alert-block\">\r\n\t<a class=\"close\" data-announcementid=\"1\">x</a><h4 class=\"alert-heading\">Warning!</h4>check yo self\r\n</div>\r\n```\r\n\r\nThe default div class is `info`. You can customise it like that:\r\n\r\n```\r\n<%= announce Announcement.newest, :div_class => \"mydiv\" %>\r\n```\r\n\r\nYou can also change the \"alert heading\" text:\r\n\r\n```\r\n<%= announce Announcement.newest, :alert_heading => \"Achtung!\" %>\r\n```\r\n\r\nYou can also change the \"hide message\" text:\r\n\r\n```\r\n<%= announce Announcement.newest, :hide_message => \"Ã—\" %>\r\n```\r\n\r\nThe output from the helper is marked as html_safe, so you can have links or add more formatting in the announcement text itself.\r\n\r\n## How it works\r\n\r\nThe gem creates an Announcement model with a few class methods like `Announcement.newest`. The Announcement model has a body:text (the actual announcement text) \r\nand a type:string (which you can use for different types of announcements, e.g. public (everyone) and private (only for registered users)). There is also a js file in vendor/assets/javascripts\r\nwhich permanently hides the announcement by creating a cookie (that's when you click on the 'hide message' text).\r\n\r\n## How to uninstall\r\n\r\nThere is no uninstaller at this point, but you can simply remove the following files manually:\r\n\r\n1. app/models/announcement.rb\r\n2. vendor/assets/javascripts/announcements.js\r\n\r\nYou also have to remove the `//= require announcements` line in your app/assets/javascripts/application.js file, and rollback the `create_announcements` migration.","tagline":"Easy way to display short announcement messages in your views.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}